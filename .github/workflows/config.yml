on:
  push:
    branches:
      - master
  pull_request:

env:
  DISPLAY: '0:0'

jobs:
  linux:
    strategy:
      matrix:
        include:
          - DOCKER_IMAGE: ubuntu:trusty
          - DOCKER_IMAGE: ubuntu:xenial
          - DOCKER_IMAGE: ubuntu:bionic
          - DOCKER_IMAGE: ubuntu:bionic
            COLLISION_LIB: PQP
          - DOCKER_IMAGE: ubuntu:bionic
            COLLISION_LIB: BULLET
          - DOCKER_IMAGE: ubuntu:focal
          - DOCKER_IMAGE: debian:stretch
          - DOCKER_IMAGE: osrf/ubuntu_armhf:trusty
          - DOCKER_IMAGE: osrf/ubuntu_armhf:xenial
          - DOCKER_IMAGE: osrf/ubuntu_arm64:trusty
          - DOCKER_IMAGE: osrf/ubuntu_arm64:xenial
          - DOCKER_IMAGE: osrf/ubuntu_arm64:bionic
          - DOCKER_IMAGE: osrf/ubuntu_arm64:focal
          - DOCKER_IMAGE: osrf/debian_arm64:stretch
      fail-fast: false

    runs-on: ubuntu-latest
    timeout-minutes: 90

    name: linux

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run test
        shell: bash
        run: |
          set -x
          export CI_SOURCE_PATH=$(pwd)
          export REPOSITORY_NAME=${PWD##*/}
          export TRAVIS_BRANCH=${GITHUB_REF#refs/heads/}
          export TRAVIS_OS_NAME=linux
          export DOCKER_IMAGE=${{matrix.DOCKER_IMAGE}}
          if [[ "$DOCKER_IMAGE" == *"arm"* ]]; then sudo apt-get install -y -qq qemu-user-static git; fi
          echo "Testing branch $TRAVIS_BRANCH of $REPOSITORY_NAME"
          docker run --rm -v $CI_SOURCE_PATH:$CI_SOURCE_PATH -e "DOCKER_IMAGE=$DOCKER_IMAGE" -e "COLLISION_LIB=$COLLISION_LIB" -e "CI_SOURCE_PATH=$CI_SOURCE_PATH" -e "HOME=$HOME" -t $DOCKER_IMAGE sh -c "cd $CI_SOURCE_PATH; ./.travis.sh"

  doc:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run test
        shell: bash
        run: |
          set -x
          sudo apt-get install -y -qq git make gcc g++ libjpeg-dev libxext-dev libx11-dev libgl1-mesa-dev libglu1-mesa-dev libpq-dev libpng-dev xfonts-100dpi xfonts-75dpi pkg-config libbullet-dev
          make
          sudo apt-get install -y -qq texlive-binaries texlive-lang-cjk texlive-lang-japanese poppler-utils nkf latex2html
          (source bashrc.eus; cd doc/; make pdf)
          (source bashrc.eus; cd doc/; make html)


  osx:
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get brew cache directory
        id: brew-cache
        run: echo "::set-output name=dir::$(brew --cache)/downloads"
      - name: Brew cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.brew-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ hashFiles('.github/workflows/Brewfile') }}
      - name: Brew config
        run: |
          cd .github/workflows/
          brew config
      - name: Run test
        shell: bash
        run: |
          set -x
          export CI_SOURCE_PATH=$(pwd)
          export REPOSITORY_NAME=${PWD##*/}
          export TRAVIS_BRANCH=${GITHUB_REF#refs/heads/}
          export LC_CTYPE=C
          echo insecure >> ~/.curlrc
          export HOMEBREW_CURLRC=1
          HOMEBREW_NO_AUTO_UPDATE=1 brew install coreutils
          export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
          # since macos-11, we need to install GL/gl.h
          HOMEBREW_NO_AUTO_UPDATE=1 brew install mesa-glu
          ./.travis-osx.sh
      - name: Cleanup some brew downloads
        run: cd ${{ steps.brew-cache.outputs.dir }} && ls -lsS | head -n 10 | awk '{ print $10 }' | xargs rm -rf
